
#include <usbhid.h>
#include <usbhub.h>
#include <hiduniversal.h>
#include <hidboot.h>
#include <SPI.h>

#include <SoftwareSerial.h>
#include <Servo.h>                      // 서보모터 라이브러리 불러오기
#define SERVO_PIN 9                     // 서보모터와 연결된 보드의 핀 정의
SoftwareSerial bt(11, 10); // (RX, TX) bluetooth 라이브러리 불러오기
Servo servo;

int motorSpeedPin = 10;      // 1번(A) 모터 회전속도(speed)
int motorDirectionPin = 12;  // 1번(A) 모터 방향제어(forward, backward)
int value=200 ;                   // 모터의 속도를 담는 변수
int sensor = A0;  // 센서핀은 A0번에 연결
int val;
uint8_t ascii;

char rec_data='C' ; //안드로이드에서 아두이노로 보내는 데이터
bool rec_chk = false; //안드로이드 블루투스 관련


unsigned char Read_Value = 0; 

class MyParser : public HIDReportParser { //QR코드 스캐너 아두이노 코드
  public:
    MyParser();
    void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);
  protected:
    uint8_t KeyToAscii(bool upper, uint8_t mod, uint8_t key);
    virtual void OnKeyScanned(bool upper, uint8_t mod, uint8_t key);
    virtual void OnScanFinished();
};

MyParser::MyParser() {} 

void MyParser::Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf) {
  // If error or empty, return
  if (buf[2] == 1 || buf[2] == 0) return;

  for (uint8_t i = 7; i >= 2; i--) {
    // If empty, skip
    if (buf[i] == 0) continue;

    // If enter signal emitted, scan finished
    if (buf[i] == UHS_HID_BOOT_KEY_ENTER) {
      OnScanFinished();
    }

    // If not, continue normally
    else {
      // If bit position not in 2, it's uppercase words
      OnKeyScanned(i > 2, buf, buf[i]);
    }

    return;
  }
}

uint8_t MyParser::KeyToAscii(bool upper, uint8_t mod, uint8_t key) {
  // Letters
  if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    if (upper) return (key - 4 + 'A');
    else return (key - 4 + 'a');
  }

  // Numbers
  else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
  }

  return 0;
}

void MyParser::OnKeyScanned(bool upper, uint8_t mod, uint8_t key) { 
  ascii = KeyToAscii(upper, mod, key);
  Serial.print((char)ascii);
  Read_Value = (char)ascii;   
             
 
  bt.println((char)Read_Value);// 블루투스에 데이터 전송 합니다.
  
}

void MyParser::OnScanFinished() {
  Serial.println("");
}

USB          Usb;
USBHub       Hub(&Usb);
HIDUniversal Hid(&Usb);
MyParser     Parser;

void setup() {
  Serial.begin(9600);           // PC와의 시리얼 통신속도
  bt.begin(9600);        // 스마트폰 블루투스 통신속도
  servo.attach(SERVO_PIN);     // 서보모터를 아두이노와 연결
  servo.write(200);
  
  pinMode(sensor, INPUT);  // 센서값을 입력으로 설정
  pinMode(motorDirectionPin, OUTPUT);  // 방향제어핀을 pinmode_OUTPUT으로 지정

  if (Usb.Init() == -1) { //스캐너
    Serial.println("OSC did not start.");
  }

  delay( 200 );

  Hid.SetReportParser(0, &Parser);
}

void loop() {
  Usb.Task();
 
  if (bt.available()) {                     // 블루투스 명령 수신
    rec_data = bt.read();
    Serial.write(rec_data);
    rec_chk = true;
  }
  
//IR센서가 값을 읽을 때 컨베이어 벨트 속도 조절
  val = digitalRead(sensor);  // 센서값 읽어옴
  if (val == LOW) {           // IR센서는 LOW ACTIVE로 탐지 시 LOW값을 전송함
   
     digitalWrite(motorDirectionPin, HIGH);       
    value = 50; 
    analogWrite(motorSpeedPin, value);
      delay(1000);
     digitalWrite(motorDirectionPin, HIGH);       
   value = 100;
    analogWrite(motorSpeedPin, value);
  }
  
//QR코드 값에 따른 서브모터 각도 제어
if((char)ascii =='d'){
  servo.write(200);
}else if((char)ascii =='e'){
  servo.write(120);
}

  //컨베이어 벨트 동작/멈춤
  if (rec_data == 'A') {
    digitalWrite(motorDirectionPin, HIGH);       
   value = 100;
    analogWrite(motorSpeedPin, value);
  }
  if (rec_data == 'C') { 
    digitalWrite(motorDirectionPin, HIGH);    
   value = 0;
    analogWrite(motorSpeedPin, value);
  }
  
//컨베이어 벨트 속도 제어
  if ( rec_data== 'F') { 
    digitalWrite(motorDirectionPin, HIGH);       
   value +=10;
    analogWrite(motorSpeedPin, value);
  }else if (rec_data == 'G') { 
    digitalWrite(motorDirectionPin, HIGH);       
   value -=10;
    analogWrite(motorSpeedPin, value);
  }
}